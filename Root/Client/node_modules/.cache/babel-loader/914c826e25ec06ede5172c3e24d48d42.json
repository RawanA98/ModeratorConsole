{"ast":null,"code":"var _jsxFileName = \"/home/rawan/Desktop/DailyMotion/moderation/src/App.tsx\";\nimport './App.css';\nimport React from \"react\";\nimport VideoThumbnail from './View/VideoThumbnail';\nimport VideoComponent from './Components/VideoComponent';\nimport ActionsList from './Components/ActionsList';\nimport { useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { Col, Container, Row } from 'react-bootstrap';\nexport const GET_USERS = gql`\n    query Query {\n        moderation {\n            nextTask {\n            media {\n                category\n                channel {\n                  name\n                  id\n                }\n                description\n                id\n                embedURL\n                thumbnailURL\n                url\n            }\n            }\n        }\n    }\n`;\nfunction App() {\n  const [videoTitle, setVideoTitle] = useState('');\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(GET_USERS, {\n    onCompleted: data => {\n      var _data$moderation$next;\n      const videoId = (_data$moderation$next = data.moderation.nextTask.media.embedURL.match(/video\\/([^_]+)/)) === null || _data$moderation$next === void 0 ? void 0 : _data$moderation$next[1];\n      if (videoId) {\n        fetch(`https://api.dailymotion.com/video/${videoId}?fields=title`).then(response => response.json()).then(data => {\n          // Check if the 'title' property exists before accessing it\n          if (data && data.title) {\n            setVideoTitle(data.title);\n          } else {\n            setVideoTitle('Video Title Not Available');\n          }\n        }).catch(error => {\n          console.error('Error fetching video title:', error);\n          setVideoTitle('Error Fetching Video Title');\n        });\n      }\n    }\n  });\n\n  //TODO useEffect to refetch query when the url change\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, \"Error: \", error.message);\n  const media = data.moderation.nextTask.media;\n  return /*#__PURE__*/React.createElement(Container, {\n    className: \"pt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(VideoThumbnail, {\n    imageSrc: media.thumbnailURL,\n    channelName: media.channel.name,\n    category: media.category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(VideoComponent, {\n    embedURL: media.embedURL,\n    videoTitle: videoTitle,\n    description: media.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ActionsList, {\n    clientID: media.id,\n    refetch: refetch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }))));\n}\nexport default App;","map":{"version":3,"names":["React","VideoThumbnail","VideoComponent","ActionsList","useState","gql","useQuery","Col","Container","Row","GET_USERS","App","videoTitle","setVideoTitle","loading","error","data","refetch","onCompleted","_data$moderation$next","videoId","moderation","nextTask","media","embedURL","match","fetch","then","response","json","title","catch","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","message","className","imageSrc","thumbnailURL","channelName","channel","name","category","description","clientID","id"],"sources":["/home/rawan/Desktop/DailyMotion/moderation/src/App.tsx"],"sourcesContent":["import './App.css';\nimport React from \"react\";\nimport VideoThumbnail from './View/VideoThumbnail';\nimport VideoComponent from './Components/VideoComponent';\nimport ActionsList from './Components/ActionsList';\nimport { useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nexport const GET_USERS = gql`\n    query Query {\n        moderation {\n            nextTask {\n            media {\n                category\n                channel {\n                  name\n                  id\n                }\n                description\n                id\n                embedURL\n                thumbnailURL\n                url\n            }\n            }\n        }\n    }\n`;\nfunction App() {\n  const [videoTitle, setVideoTitle] = useState<string>('');\n  const { loading, error, data, refetch } = useQuery(GET_USERS, {\n    onCompleted: (data) => {\n      const videoId = data.moderation.nextTask.media.embedURL.match(/video\\/([^_]+)/)?.[1];\n  \n      if (videoId) {\n        fetch(`https://api.dailymotion.com/video/${videoId}?fields=title`)\n        .then(response => response.json())\n        .then(data => {\n            // Check if the 'title' property exists before accessing it\n            if (data && data.title) {\n            setVideoTitle(data.title);\n            } else {\n            setVideoTitle('Video Title Not Available');\n            }\n        })\n        .catch(error => {\n            console.error('Error fetching video title:', error);\n            setVideoTitle('Error Fetching Video Title');\n        });\n      }\n    }\n  });\n\n  //TODO useEffect to refetch query when the url change\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>\n\n  const media = data.moderation.nextTask.media;\n\n  return (\n  <Container className='pt-5'>\n    <Row>\n      <Col>\n        <VideoThumbnail imageSrc={media.thumbnailURL} channelName={media.channel.name} category={media.category} />\n      </Col>\n      <Col>\n        <VideoComponent embedURL={media.embedURL} videoTitle={videoTitle} description={media.description} />\n      </Col>\n      <Col>\n        <ActionsList clientID={media.id} refetch={refetch}/>\n      </Col>\n    </Row>\n  </Container>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}